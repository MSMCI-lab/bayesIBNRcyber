# Bayesian IBNR Model Implementation in R
# This script performs data preparation, model setup, MCMC sampling, and post-processing using nimble and parallel computing.

# Load required libraries
library(nimble)
library(coda)
library(doParallel)
library(ggplot2)
library(dplyr)
library(reshape2)

# load data
data <- read.csv("simulation.csv")

# Define model dimensions
nT <- 72  # Time periods
nD <- 12  # Delay periods

# Retain original incident count data for evaluation
original_data <- as.matrix(data)  # Original incident counts matrix

# Prepare data by limiting reporting range and creating missing values for prediction
for (i in (nT - 10):nT) {
  for (j in (nT + 2 - i):nD) {
    data[i, j] <- NA
  }
}
y <- as.matrix(data)  # Modified incident counts matrix with NAs for prediction

# Calculate reporting proportions (hazard matrix)
pmatrix <- prop.table(y, margin = 1)

# Bayesian Model Definition
model_code <- nimbleCode({
  for (t in 1:nT) {
    for (d in 1:nD) {
      logit(pmatrix[t, d]) <- beta[1] + beta[2] * t + beta[3] * d / nD
      log(lambda[t, d]) <- g[1] + g[2] * t + g[3] * d / nD
      y[t, d] ~ dnegbin(prob = pmatrix[t, d], size = lambda[t, d])
    }
  }
  
  # Priors for parameters
  for (i in 1:3) {
    g[i] ~ dnorm(0, sig[i])
    beta[i] ~ dnorm(0, sig[i + 3])
  }
  
  # Priors for standard deviations
  for (i in 1:6) {
    sig[i] ~ dexp(rate = 1)
  }
})

# Initialize model parameters and data list for nimble
constants <- list(nT = nT, nD = nD)
data_list <- list(y = y)
inits <- list(y = y, g = rnorm(3), beta = rnorm(3), sig = rep(1, 6))

# Compile the model and set up MCMC
model <- nimbleModel(code = model_code, constants = constants, data = data_list, inits = inits)
compiled_model <- compileNimble(model)
mcmc_config <- configureMCMC(model, monitors = c("g", "beta", "y", "sig"))
compiled_mcmc <- compileNimble(buildMCMC(mcmc_config), project = model)

# Set up parallel processing
num_cores <- detectCores() - 1
registerDoParallel(cores = num_cores)
set.seed(123)


# Run MCMC with parallel chains
chains <- foreach(chain = 1:3, .packages = c("nimble", "coda")) %dopar% {
  # Run the MCMC for each chain
  chain_samples <- runMCMC(compiled_mcmc, nchains = 1, nburnin = 1e+5, niter = 5e+5, thin = 100, samplesAsCodaMCMC = TRUE)
  # Convert to mcmc object
  as.mcmc(chain_samples)
}

# Combine the separate chains into an mcmc.list
samples <- mcmc.list(chains)


# Save MCMC results
save(samples, file = "MCMC_results.RData")


results1=samples[,c("beta[1]","beta[2]","beta[3]","g[1]","g[2]","g[3]", paste0("sig[", 1:6, "]"))]
 
 
# Post-Processing: Summarize and extract predictions
summary_samples <- summary(results1)
rhat_values <- gelman.diag(results1)
effective_sizes <- effectiveSize(results1)
summary_samples
 

# Convert MCMC samples for prediction and extract y predictions
sims_matrix <- do.call(rbind, lapply(samples, as.matrix))
y_pred <- array(dim = c(nrow(sims_matrix), nT, nD))

# Fill prediction matrix with posterior samples
for (t in (nT - 10):nT) {
  for (d in (nT + 2 - t):nD) {
    y_pred[, t, d] <- sims_matrix[, paste0("y[", t, ", ", d, "]")]
  }
}


# Compute prediction intervals and errors
pred_mean <- apply(y_pred, c(2, 3), mean, na.rm = TRUE)
pred_median <- apply(y_pred, c(2, 3), median, na.rm = TRUE)
pred_lower95 <- apply(y_pred, c(2, 3), quantile, probs = 0.025, na.rm = TRUE)
pred_upper95 <- apply(y_pred, c(2, 3), quantile, probs = 0.975, na.rm = TRUE)

####mean prediction####
pred_mean[(nT - 10):nT,(nT + 2 - t):nD]

####median prediction#####
pred_median[(nT - 10):nT,(nT + 2 - t):nD]

###original data###
original_data[(nT - 10):nT,(nT + 2 - t):nD]

# Mean squared error (MSE) and mean absolute error (MAE) calculations against original data
mse <- mean((pred_median - original_data)^2, na.rm = TRUE)
mae <- mean(abs(pred_median - original_data), na.rm = TRUE)

cat("Mean Squared Error:", mse, "\n")
cat("Mean Absolute Error:", mae, "\n")
 
